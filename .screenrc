# Escape
#escape ^Tt
escape ^Qq

# Disable t
#bind t
#bind ^t

# Only: Q (default)
bind q only
#bind ^q only

# source setup file
#bind q eval "source $HOME/.screenrc"
bind t eval "source $HOME/.screenrc"

# Scroll back
defscrollback 10000

# Don't show start up message
startup_message off

# Auto detach
autodetach on

# Show action in the hidden window
defmonitor on

# hardcopydir
hardcopydir $HOME/screenlog

# Time (second) to show message
msgwait 5

# For search
ignorecase on

# Disable flow control (C-s/C-q)
defflow off

# Remove background color
#defbce "on"

# kill
bind K kill

# Use bright color for the characters
attrcolor b ".I"

# Clear scrollback buffer
bind F eval 'scrollback 0' 'scrollback 1000' 'echo "scrollback buffer cleared"'

# Don't clear after finishing application
#altscreen on

# disable loginmode (if update /var/run/utmp)
deflogin on

# verbose
#verbose on

# Modify window list
bind w  windowlist -b
#bind ^W windowlist -b
#bind ^W windowlist -b -m # sorting by most-recentry-used list.
##disable...
#bind w 
bind ^W

# Clear display before detachment
#bind d eval 'only' 'clear' 'detach'

# Colors for other messages, including center line
#sorendition "+rb .w"
sorendition " .K"

# Remove
# x: default lockscreen
bind x remove

# Continuous window change
#bind ^n eval 'next'
#bind ^p eval 'prev'
bind ^n eval 'command -c window' 'next'
bind ^p eval 'command -c window' 'prev'
bind -c window n eval 'next'
bind -c window p eval 'prev'
bind -c window ^n eval 'command -c window' 'next'
bind -c window ^p eval 'command -c window' 'prev'
bind -c window ^q eval 'command -c window'

# Focus (like vi)
#bind l focus next
#bind h focus prev
bind h  eval 'focus left'
bind j  eval 'focus down'
bind k  eval 'focus up'
bind l  eval 'focus right'
bind ^h eval    'focus left'
bind -k kb eval 'focus left' #Backspace
bind ^j eval    'focus down'
bind ^k eval    'focus up'
bind ^l eval    'focus right'

#bind ^h eval    'command -c move' 'focus left'
#bind -k kb eval 'command -c move' 'focus left' #Backspace
#bind ^j eval    'command -c move' 'focus down'
#bind ^k eval    'command -c move' 'focus up'
#bind ^l eval    'command -c move' 'focus right'
#bind ^q eval    'command -c move'

#bind -c move h eval 'focus left'
#bind -c move j eval 'focus down'
#bind -c move k eval 'focus up'
#bind -c move l eval 'focus right'
#bind -c move ^h eval    'command -c move' 'focus left'
#bind -c move -k kb eval 'command -c move' 'focus left' #Backspace
#bind -c move ^j eval    'command -c move' 'focus down'
#bind -c move ^k eval    'command -c move' 'focus up'
#bind -c move ^l eval    'command -c move' 'focus right'
#bind -c move ^q eval    'command -c move'

# Split
bind V split -v
bind S split

# Layout
# Layout command prefix C-q
bind ^q eval 'command -c layout' 'layout show'
bind -c layout ^q eval 'command -c layout' 'layout show'
# Make/Remove layout
bind -c layout c eval 'command -c layout' 'layout new' 'layout show'
bind -c layout x eval 'command -c layout' 'layout remove' 'layout show'
# Modify title/number
bind -c layout T colon 'layout title '
bind -c layout N colon 'layout number '
# Go to Next/Previous layout
bind -c layout n eval 'layout next' 'layout show'
bind -c layout p eval 'layout prev' 'layout show'
bind -c layout ^N eval 'command -c layout' 'layout next' 'layout show'
bind -c layout ^P eval 'command -c layout' 'layout prev' 'layout show'
# Choose n-th layout
bind -c layout 0 eval 'command -c layout' 'layout select 0' 'layout show'
bind -c layout 1 eval 'command -c layout' 'layout select 1' 'layout show'
bind -c layout 2 eval 'command -c layout' 'layout select 2' 'layout show'
bind -c layout 3 eval 'command -c layout' 'layout select 3' 'layout show'
bind -c layout 4 eval 'command -c layout' 'layout select 4' 'layout show'
bind -c layout 5 eval 'command -c layout' 'layout select 5' 'layout show'
bind -c layout 6 eval 'command -c layout' 'layout select 6' 'layout show'
bind -c layout 7 eval 'command -c layout' 'layout select 7' 'layout show'
bind -c layout 8 eval 'command -c layout' 'layout select 8' 'layout show'
bind -c layout 9 eval 'command -c layout' 'layout select 9' 'layout show'
# Initialize layouts
bind -c layout i eval 'echo "Initialize layouts..."' 'screen' 'screen' 'screen' 'layout new only' 'only' 'select 0' 'layout new 4-windows' 'only' 'select 0' 'split' 'split -v' 'focus' 'select 1' 'focus' 'select 2' 'split -v' 'focus' 'select 3' 'focus' 'layout new 3-win_1-top' 'only' 'select 0' 'split' 'resize -v 70%' 'focus' 'select 1' 'split -v' 'focus' 'select 2' 'focus' 'layout new 3-win_1-left' 'only' 'select 0' 'split -v' 'focus' 'select 1' 'split' 'focus' 'select 2' 'focus' 'layout new monitor' 'only' 'select 0' 'split' 'resize -v 80%' 'focus' 'select 1' 'split -v' 'split -v' 'focus' 'select 2' 'focus' 'select 3' 'focus' 'layout select 4-windows'
bind -c layout ^i eval 'echo "Initialize layouts..."' 'screen' 'screen' 'screen' 'layout new only' 'only' 'select 0' 'layout new 4-windows' 'only' 'select 0' 'split' 'split -v' 'focus' 'select 1' 'focus' 'select 2' 'split -v' 'focus' 'select 3' 'focus' 'layout new 3-win_1-top' 'only' 'select 0' 'split' 'resize -v 70%' 'focus' 'select 1' 'split -v' 'focus' 'select 2' 'focus' 'layout new 3-win_1-left' 'only' 'select 0' 'split -v' 'focus' 'select 1' 'split' 'focus' 'select 2' 'focus' 'layout new monitor' 'only' 'select 0' 'split' 'resize -v 80%' 'focus' 'select 1' 'split -v' 'split -v' 'focus' 'select 2' 'focus' 'select 3' 'focus' 'layout select 4-windows'
# Reset layouts
bind -c layout r eval 'echo "Reset layouts..."' 'layout select only' 'only' 'select 0' 'layout select 4-windows' 'only' 'select 0' 'split' 'split -v' 'focus' 'select 1' 'focus' 'select 2' 'split -v' 'focus' 'select 3' 'focus' 'layout select 3-win_1-top' 'only' 'select 0' 'split' 'resize -v 70%' 'focus' 'select 1' 'split -v' 'focus' 'select 2' 'focus' 'layout select 3-win_1-left' 'only' 'select 0' 'split -v' 'focus' 'select 1' 'split' 'focus' 'select 2' 'focus' 'layout select monitor' 'only' 'select 0' 'split' 'resize -v 80%' 'focus' 'select 1' 'split -v' 'split -v' 'focus' 'select 2' 'focus' 'select 3' 'focus' 'layout select 4-windows'
bind -c layout ^r eval 'echo "Reset layouts..."' 'layout select only' 'only' 'select 0' 'layout select 4-windows' 'only' 'select 0' 'split' 'split -v' 'focus' 'select 1' 'focus' 'select 2' 'split -v' 'focus' 'select 3' 'focus' 'layout select 3-win_1-top' 'only' 'select 0' 'split' 'resize -v 70%' 'focus' 'select 1' 'split -v' 'focus' 'select 2' 'focus' 'layout select 3-win_1-left' 'only' 'select 0' 'split -v' 'focus' 'select 1' 'split' 'focus' 'select 2' 'focus' 'layout select monitor' 'only' 'select 0' 'split' 'resize -v 80%' 'focus' 'select 1' 'split -v' 'split -v' 'focus' 'select 2' 'focus' 'select 3' 'focus' 'layout select 4-windows'
# Set layout
bind -c layout m eval 'command -c  layoutm' 'echo "0 only, l 4-windows, 2 3-win_1-top, 3 3-win_1-top, 4 monitor (1 top, 3 small bottoms), 5 split, 6 vsplit, "'
bind -c layoutm 0 eval 'only' 'layout show'
bind -c layoutm 1 eval 'only' 'only' 'select 0' 'split' 'split -v' 'focus' 'select 1' 'focus' 'select 2' 'split -v' 'focus' 'select 3' 'focus' 'layout show'
bind -c layoutm 2 eval 'only' 'select 0' 'split' 'resize -v 70%' 'focus' 'select 1' 'split -v' 'focus' 'select 2' 'focus'
bind -c layoutm 3 eval 'only' 'select 0' 'split -v' 'focus' 'select 1' 'split' 'focus' 'select 2' 'focus' 
bind -c layoutm 4 eval 'only' 'select 0' 'split' 'resize -v 80%' 'focus' 'select 1' 'split -v' 'split -v' 'focus' 'select 2' 'focus' 'select 3' 'focus'
bind -c layoutm 5 eval 'only' 'select 0' 'split' 'focus' 'select 1' 'focus'
bind -c layoutm 6 eval 'only' 'select 0' 'split -v' 'focus' 'select 1' 'focus'

# Make 4 window with new 4 screen
bind s eval 'layout select 4-windows' 'screen' 'screen' 'screen' 'only' 'split' 'select 0' 'split -v' 'focus' 'select 1' 'focus' 'select 2' 'split -v' 'focus' 'select 3' 'focus'
bind ^s eval 'layout select 4-windows' 'screen' 'screen' 'screen' 'only' 'split' 'select 0' 'split -v' 'focus' 'select 1' 'focus' 'select 2' 'split -v' 'focus' 'select 3' 'focus'

# Make 4 window with no new screen
bind r eval 'layout select 4-windows' 'only' 'split' 'select 0' 'split -v' 'focus' 'select 1' 'focus' 'select 2' 'split -v' 'focus' 'select 3' 'focus'
bind ^r eval 'layout select 4-windows' 'only' 'split' 'select 0' 'split -v' 'focus' 'select 1' 'focus' 'select 2' 'split -v' 'focus' 'select 3' 'focus'

# Resize window
bind e eval 'command -c resize' 'echo "Resize window"'
bind ^e eval 'command -c resize' 'echo "Resize window"'
bind -c resize h eval 'command -c resize' 'resize -h -1'
bind -c resize l eval 'command -c resize' 'resize -h +1'
bind -c resize j eval 'command -c resize' 'resize -v +1'
bind -c resize k eval 'command -c resize' 'resize -v -1'
bind -c resize ^h eval 'command -c resize' 'resize -h -1'
bind -c resize ^l eval 'command -c resize' 'resize -h +1'
bind -c resize ^j eval 'command -c resize' 'resize -v +1'
bind -c resize ^k eval 'command -c resize' 'resize -v -1'

# Clip board, xclip or xsel?
# xsel (xclip also?) sometime remains like zombie...?
bufferfile "$SCREENEXCHANGE"

# ref: man screen -> exec
# !!! is needed especially for ' '.
# It execute the command at first ' ' to start the copy,
# and do again at the end, then multi_clipboard is executed twice...
# If . is set for stdout (second one), the second command is not executed...?
bindkey -m ' ' eval 'stuff \040' 'writebuf' 'exec !!! multi_clipboard -I'
bindkey -m Y eval 'stuff Y' 'writebuf' 'exec !!! multi_clipboard -I'
bindkey -m W eval 'stuff W' 'writebuf' 'exec !!! multi_clipboard -I'

# !!! should not be applied (especially for stdout (second one).
# Otherwise some outputs come to the window(?)
#bind a eval 'command -c mc' 'exec multi_clipboard -S'
#bind ^a eval 'command -c mc' 'exec multi_clipboard -S'
#bind -c mc n eval 'command -c mc' 'exec multi_clipboard -S -n'
#bind -c mc ^n eval 'command -c mc' 'exec multi_clipboard -S -n'
#bind -c mc p eval 'command -c mc' 'exec multi_clipboard -S -p'
#bind -c mc ^p eval 'command -c mc' 'exec multi_clipboard -S -p'
#bind -c mc q eval 'exec multi_clipboard -S -q'
#bind -c mc ^q eval 'exec multi_clipboard -S -q'
#bind -c mc ' ' eval 'exec multi_clipboard -S -s'
# Enter (\012) doesn't work for bindings with command?
#bind -c mc '\012' eval "!bash -c 'multi_clipboard -S -s'"
bind a screen -t multi_clipboard multi_clipboard -W
bind ^a screen -t multi_clipboard multi_clipboard -W

# Term
#term "screen-256color"

# not change the window size when it is attached
termcapinfo xterm* is=\E[r\E[m\E[2J\E[H\E[?7h\E[?1;4;6l

# xterm understands both im/ic and doesn't have a status line.
# Note: Do not specify im and ic in the real termcap/info file as
# some programs (e.g. vi) will (no,no, may (jw)) not work anymore.
termcap xterm* hs@:cs=\E[%i%d;%dr:im=\E[4h:ei=\E[4l
terminfo xterm* hs@:cs=\E[%i%p1%d;%p2%dr:im=\E[4h:ei=\E[4l

# Do not use xterms alternate window buffer.
# This one would not add lines to the scrollback buffer.
termcapinfo xterm* ti=\E7\E[?47l

# Caption for each window
setenv a ""
setenv a "$a%?%F"     # if the window has the focus
setenv a "$a%{=d Wk}" #   set attribute = {dim, black(k) on bright Write(W)}
setenv a "$a%:"       # else
setenv a "$a%{=d Kk}" #   set attribute = {dim, black(k) on bright Black(K)}
setenv a "$a%?"       # end if
setenv a "$a%?%P"     # if copy/paste mode
setenv a "$a%{=d Bk}" #   set attribute = {dim, black(k) on bright Blue(B)}
setenv a "$a%?"       # end if
setenv a "$a%n"       # window number
setenv a "$a "        # space
setenv a "$a%L="      # Mark the position for the next truncation
setenv a "$a%h"       # window' hardstatus
setenv a "$a%L>"      # Truncate %L= ~ %L>, 'L' for > gives marks at the truncation point
setenv a "$a%="       # With the last %-0=, it makes right alignment for following lines
setenv a "$a%?%P"     # if copy/paste mode
setenv a "$a  *copy/paste*" # draw this sentence
setenv a "$a%?"       # end if
setenv a "$a%?%E"     # if copy/paste mode
setenv a "$a  ***command**" # draw this sentence
setenv a "$a%?"       # end if
setenv a "$a%-0="     # pad the string to the display's width. "-0" means
                      # start from the rightest side
                      # (e.g. 10=: 10% from left, 010, 10 characters from left
                      # (     -10=: 10% from right)
                      # With %L>, %= above, screen tries to truncates the part 
                      # in the left of "%L>"
caption always "$a"
unsetenv a

# hardstatus
setenv a ""
setenv a "$a%{= Kk}" # set attribute = {black(k) on bright Black(K)}
setenv a "$a%-w"     # windows' list up to the current window (shown as "%n %t")
setenv a "$a%40>"    # Mark here as a point to move when truncation
                     # Try to move this point to the 40% point
setenv a "$a%{= Wk}" # set attribute = {black(k) on bright Write(W)}
setenv a "$a%n"      # current window number
setenv a "$a "       # space
setenv a "$a%t"      # current window title
setenv a "$a%{-}"    # remove the set from the current attributes
setenv a "$a%+w"     # windows' list starting with the window after the current one (shown as "%n %t")
setenv a "$a%-0="    # pad the string to the display's width.
                     # About Truncation/Padding(=,<,>)
                     # http://aperiodic.net/screen/truncation_padding_escapes
hardstatus alwayslastline "$a"
unsetenv a
