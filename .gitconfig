[user]
  name = rcmdnk
  email = rcmdnk@gmail.com

[alias]
  st = status
  sb = show-branch
  sh = show
  br = branch
  ba = branch -a
  co = checkout
  ce = checkout --orphan # checkout empty(orphan ) branch
  cl = clone
  ci = commit -a
  ad = add -A
  rbm = rebase master
  d = difftool --tool=vimdiff --no-prompt
  dns = diff --name-status
  dm = diff master
  dw = diff --color-words
  dc = diff --cached
  ds = diff --staged
  d1 = diff HEAD~
  d2 = diff HEAD~~
  d3 = diff HEAD~~~
  d4 = diff HEAD~~~~
  d5 = diff HEAD~~~~~
  d10 = diff HEAD~~~~~~~~~~
  ls = ls-files
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  sm = submodule
  echo-f = "!f () { echo 0: ${0};echo 1: ${1};echo 2: ${2};};f"
  echo-sh = "!sh -c 'echo 0: ${0};echo 1: ${1};echo 2: ${2}'"
  echo = "!f () { echo ${0};echo ${1};};f"
  echo3 = "!sh -c 'echo ${0};echo ${1}'"
  smad = "!f () {\
      if [ $# -lt 1 ];then \
        echo \"Usage: git smad git_repo_path [submodule parent path]\";\
        exit;\
      fi;\
      git_repo=${1};\
      repo_name=${git_repo#*/};\
      repo_name=${repo_name%.git};\
      base=$(basename \"${2}\");\
      if [ \"$base\" = \"$repo_name\" ];then \
        path=\"$(dirname \"${2}\")\";\
      else \
        path=\"${2}\";\
      fi;\
      echo git submodule add ${git_repo} \"./${path}/${repo_name}\";\
      git submodule add ${git_repo} \"./${path}/${repo_name}\";\
    };f"
  a = "!f () { \
      gitdir=./;\
      gitfile=.git;\
      while : ;do \
        if [ -f $gitfile ];then \
          gitfile=${gitdir}/$(awk '/gitdir/ {print $2}' ${gitfile});\
        else \
          gitdir=${gitfile};\
          break;\
        fi;\
      done;\
      echo $gitdir;\
    };f"
  smrm  = "!f () {\
      if [ $# -ne 1 ];then \
        echo \"Usage: git smrm path/to/submodule\";\
        exit;\
      fi;\
      sm=${1%/};\
      echo git config --remove-section submodule.${sm};\
      git config --remove-section submodule.${sm};\
      echo git config --file .gitmodules --remove-section submodule.${sm};\
      git config --file .gitmodules --remove-section submodule.${sm};\
      echo git rm --cached ${sm};\
      git rm --cached ${sm};\
      gitdir=./;\
      gitfile=.git;\
      while : ;do \
        if [ -f $gitfile ];then \
          gitfile=${gitdir}/$(awk '/gitdir/ {print $2}' ${gitfile});\
        else \
          gitdir=${gitfile};\
          break;\
        fi;\
      done;\
      if [ -n \"${gitdir}\" ];then \
        echo rm -rf ${gitdir}/modules/${sm};\
        rm -rf ${gitdir}/modules/${sm};\
      fi;\
      echo rm -rf ${sm};\
      rm -rf ${sm};\
    };f"
  cb = rev-parse --abbrev-ref HEAD
  pull-dry-run  = "!git fetch origin;\
    b=$(git rev-parse --abbrev-ref HEAD);\
    git diff --stat --summary ${b}..origin/${b}"
  pull-dry-run-s = "!git fetch origin $(git config branch.$(git rev-parse --abbrev-ref HEAD).merge);\
    git diff --stat --summary HEAD...FETCH_HEAD"
  tag-renew = "!f () {\
      tag=$(git  tag |sed s/v//g|sort -t . -n -k1,1 -k2,2 -k3,3|tail -n1);\
      if [ $# -eq 0 ];then \
        comment=$(git log -1|grep -v -e \"^commit\"  -e \"^Author\" -e \"^Date\" -e \"^$\"|sed "s/^ *//");\
      else \
        comment=\"$*\";\
      fi;\
      tagcheck=$(git tag|grep v${tag});\
      if [ \"$tagcheck\" != \"\" ];then \
        git tag -d v${tag};\
        git push origin :v${tag};\
      fi;\
      git tag -a v${tag} -m \"${comment}\";\
      git push --tag;\
    };f"
  tag-new = "!f () {\
      tag=$(git  tag |sed s/v//g|sort -t . -n -k1,1 -k2,2 -k3,3|tail -n1);\
      tag_minor=${tag##*.};\
      ((tag_minor++));\
      tag=${tag%.*}.${tag_minor};\
      if [ $# -eq 0 ];then \
        comment=$(git log -1|grep -v -e \"^commit\"  -e \"^Author\" -e \"^Date\" -e \"^$\"|sed \"s/^ *//\");\
      else \
        comment=\"$*\";\
      fi;\
      tagcheck=$(git tag|grep v${tag});\
      if [ \"$tagcheck\" != \"\" ];then \
        git tag -d v${tag};\
        git push origin :v${tag};\
      fi;\
      git tag -a v${tag} -m \"${comment}\";\
      git push --tag;\
    };f"
  cancel = "!f () {\
      git commit -a -m 'Temporary commit for cancel';\
      git reset --hard HEAD~;\
    };f"
  update = "!f () {\
      update=0;\
      difffiles=`git status|grep -e 'new file' -e 'modified'|cut -d':' -f2`;\
      if [ \"$difffiles\" ];then \
        pwd;\
        if [ -f ~/.gitavoid ];then \
          for f in `git ls-files`;do \
            if [ ! -f $f ];then \
              continue;\
            fi;\
            while read a;do \
              if ret=`grep -i -q $a $f`;then \
                echo \"avoid word $a is included in $f!!!\";\
                echo $ret;\
                return;\
              fi;\
            done < ~/.gitavoid;\
          done;\
        else \
          echo 'WARNING: There is no ~/.gitavoid file!';\
        fi;\
        printf \"\n\";\
        update=1;\
      fi;\
      ret=`git commit -a -m \"$difffiles, from $OSTYPE\"`;\
      if echo $ret|grep -q 'changed';then \
        if [ $update -eq 0 ];then \
          pwd;\
        fi;\
        echo $ret;\
        update=1;\
      fi;\
      ret=$(git pull --rebase);\
      ret=$(git push 2>&1);\
      if ! echo $ret|grep -q -e 'Everything up-to-date' -e 'Permission';then \
        if [ $update -eq 0 ];then \
          pwd;\
        fi;\
        echo $ret;\
      fi;\
      git gc >& /dev/null;\
    };f"

[core]
# filemode = false
  autocrlf = false
  editor = vim
  execludesfile = ~/.gitignore_global

[push]
# default = simple
  default = matching

[github]
  user = rcmdnk
[merge]
  tool = vimdiff
  keepBackup = false
